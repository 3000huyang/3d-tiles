{
  "$schema": "http://json-schema.org/draft-04/schema",
  "title": "Feature class property",
  "type": "object",
  "allOf": [{ "$ref": "glTFProperty.schema.json" }],
  "properties": {
    "name": {
      "type": "string",
      "minLength": 1,
      "description": "The name of the property, e.g. for display purposes. The string is UTF-8 encoded."
    },
    "description": {
      "type": "string",
      "minLength": 1,
      "description": "The description of the property. The string is UTF-8 encoded."
    },
    "elementType": {
      "type": "string",
      "enum": ["SCALAR", "ARRAY", "VARIABLE_SIZE_ARRAY", "STRING", "BINARY"],
      "description": "The type of each element of the property array. This value may be a `SCALAR` (boolean, integer, or float types), or it may be an array type. If `SCALAR`, `ARRAY`, or `VARIABLE_SIZE_ARRAY` is used, then `componentType` must also be specified. `ARRAY` is a fixed-length array, and requires a `componentsPerElement` property. `VARIABLE_SIZE_ARRAY`, `STRING`, and `BINARY` also require a corresponding `offsetsBufferView` to indicate where each element starts in the buffer. `STRING` is similar to a `VARIABLE_SIZE_ARRAY` of `UINT8`, except that the contents will be a UTF-8 encoded string. `BINARY` is an alias for a `VARIABLE_SIZE_ARRAY` of `UINT8`. This adds semantic meaning that the element is used as a binary blob, rather than an array of numbers"
    },
    "componentType": {
      "enum": [
        "BOOLEAN",
        "INT8",
        "UINT8",
        "INT16",
        "UINT16",
        "INT32",
        "UINT32",
        "INT64",
        "UINT64",
        "FLOAT16",
        "FLOAT32",
        "FLOAT64"
      ],
      "description": "When `elementType` is `ARRAY` or `VARIABLE_SIZE_ARRAY`, this indicates the type of each component of the array. When `elementType` is `SCALAR`, this indicates the type of the scalar. This property is not used for the other element types (even `BINARY` and `STRING`)."
    },
    "componentsPerElement": {
      "type": "integer",
      "minimum": 1,
      "default": 1,
      "description": "The number of components per element for `ARRAY` elements."
    },
    "normalized": {
      "type": "boolean",
      "description": "Specifies whether integer values are normalized. This applies both when `elementType` is an integer `SCALAR` type, or when `elementType` is `ARRAY` or `VARIABLE_SIZE_ARRAY` with a `componentType` that is an integer. For unsigned integer types, values are normalized between [0, 1]. For signed integer types, values are normalized between [-1, 1]. For all other types, this property is ignored.",
      "default": false
    },
    "max": {
      "type": "array",
      "description": "Maximum allowed values for property data. Only applicable for fixed-size numeric element types (`SCALAR` and `ARRAY`). Both `min` and `max` arrays have the same length. The length is determined by `componentsPerElement`. `normalized` property has no effect on array values: they always correspond to the integer values.",
      "items": {
        "type": "number"
      },
      "minItems": 1
    },
    "min": {
      "type": "array",
      "description": "Minimum allowed values for property data. Only applicable for fixed-size numeric element types (`SCALAR` and `ARRAY`). Both `min` and `max` arrays have the same length. The length is determined by `componentsPerElement`. `normalized` property has no effect on array values: they always correspond to the integer values.",
      "items": {
        "type": "number"
      },
      "minItems": 1
    },
    "extensions": {},
    "extras": {}
  },
  "dependencies": {
    "componentsPerElement": ["componentType"]
  }
}
